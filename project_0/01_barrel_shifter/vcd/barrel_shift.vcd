$date
	Sat Jul  6 22:49:45 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module barrel_shift_tb $end
$var wire 8 ! o_data_compare [7:0] $end
$var wire 8 " o_data [7:0] $end
$var reg 1 # i_clk $end
$var reg 8 $ i_data [7:0] $end
$var reg 3 % i_shifter [2:0] $end
$var reg 1 & sel_left $end
$var reg 256 ' vcd_file [255:0] $end
$var integer 32 ( i [31:0] $end
$scope module u_barrel_shift $end
$var wire 8 ) i_data [7:0] $end
$var wire 3 * i_shifter [2:0] $end
$var wire 1 & sel_left $end
$var wire 8 + o_data [7:0] $end
$upscope $end
$scope module u_barrel_shift_compare $end
$var wire 8 , i_data [7:0] $end
$var wire 3 - i_shifter [2:0] $end
$var wire 1 & sel_left $end
$var wire 3 . sel [2:0] $end
$var wire 8 / o_data [7:0] $end
$var wire 8 0 mid_data [7:0] $end
$var wire 8 1 i_start_data [7:0] $end
$var wire 8 2 first_data [7:0] $end
$upscope $end
$scope task init $end
$upscope $end
$scope task test $end
$var reg 3 3 i_sel_left [2:0] $end
$var reg 8 4 i_task_data [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 4
bx 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
bx (
b101110001011110111011001100011011001000010111101100010011000010111001001110010011001010110110001011111011100110110100001101001011001100111010000101110011101100110001101100100 '
0&
b0 %
b0 $
0#
b0 "
b0 !
$end
#5
b1100110 !
b1100110 /
b1100110 0
b1100110 2
b1100110 "
b1100110 +
b1100110 1
b1100110 $
b1100110 )
b1100110 ,
b1100110 4
b0 3
1#
#10
0#
#15
b110011 !
b110011 /
b110011 "
b110011 +
b1 .
b1 %
b1 *
b1 -
b0 (
1#
#20
0#
#25
b10011001 0
b10011001 !
b10011001 /
b10011001 "
b10011001 +
b10 .
b10 %
b10 *
b10 -
b1 (
1#
#30
0#
#35
b11001100 !
b11001100 /
b11001100 "
b11001100 +
b11 .
b11 %
b11 *
b11 -
b10 (
1#
#40
0#
#45
b1100110 0
b1100110 !
b1100110 /
b1100110 "
b1100110 +
b100 .
b100 %
b100 *
b100 -
b11 (
1#
#50
0#
#55
b110011 !
b110011 /
b110011 "
b110011 +
b101 .
b101 %
b101 *
b101 -
b100 (
1#
#60
0#
#65
b10011001 0
b10011001 !
b10011001 /
b10011001 "
b10011001 +
b110 .
b110 %
b110 *
b110 -
b101 (
1#
#70
0#
#75
b11001100 !
b11001100 /
b11001100 "
b11001100 +
b111 .
b111 %
b111 *
b111 -
b110 (
1#
#80
0#
#85
b1100110 0
b1100110 !
b1100110 /
b1100110 "
b1100110 +
b0 .
b0 %
b0 *
b0 -
b1 3
b111 (
1#
#90
0#
#95
b11001100 0
b11001100 !
b11001100 /
b110011 2
b11001100 "
b11001100 +
b110 .
b110011 1
b1 %
b1 *
b1 -
1&
b0 (
1#
#100
0#
#105
b110011 0
b10011001 !
b10011001 /
b10011001 "
b10011001 +
b101 .
b10 %
b10 *
b10 -
b1 (
1#
#110
0#
#115
b110011 !
b110011 /
b110011 "
b110011 +
b100 .
b11 %
b11 *
b11 -
b10 (
1#
#120
0#
#125
b11001100 0
b1100110 !
b1100110 /
b1100110 "
b1100110 +
b11 .
b100 %
b100 *
b100 -
b11 (
1#
#130
0#
#135
b11001100 !
b11001100 /
b11001100 "
b11001100 +
b10 .
b101 %
b101 *
b101 -
b100 (
1#
#140
0#
#145
b110011 0
b10011001 !
b10011001 /
b10011001 "
b10011001 +
b1 .
b110 %
b110 *
b110 -
b101 (
1#
#150
0#
#155
b110011 !
b110011 /
b110011 "
b110011 +
b0 .
b111 %
b111 *
b111 -
b110 (
1#
#160
0#
#165
b10110011 2
b11101100 0
b1110110 !
b1110110 /
b111 .
b1110110 "
b1110110 +
b111011 1
b0 %
b0 *
b0 -
b1110110 $
b1110110 )
b1110110 ,
b1110110 4
b0 3
b111 (
1#
#170
0#
#175
b1110110 0
b111011 !
b111011 /
b1110110 2
b111011 "
b111011 +
b1 .
b1110110 1
b1 %
b1 *
b1 -
0&
b0 (
1#
#180
0#
#185
b10011101 0
b10011101 !
b10011101 /
b10011101 "
b10011101 +
b10 .
b10 %
b10 *
b10 -
b1 (
1#
#190
0#
#195
b11001110 !
b11001110 /
b11001110 "
b11001110 +
b11 .
b11 %
b11 *
b11 -
b10 (
1#
#200
0#
#205
b1100111 2
b1100111 0
b1100111 !
b1100111 /
b1100111 "
b1100111 +
b100 .
b100 %
b100 *
b100 -
b11 (
1#
#210
0#
#215
b10110011 !
b10110011 /
b10110011 "
b10110011 +
b101 .
b101 %
b101 *
b101 -
b100 (
1#
#220
0#
#225
b11011001 0
b11011001 !
b11011001 /
b11011001 "
b11011001 +
b110 .
b110 %
b110 *
b110 -
b101 (
1#
#230
0#
#235
b11101100 !
b11101100 /
b11101100 "
b11101100 +
b111 .
b111 %
b111 *
b111 -
b110 (
1#
#240
0#
#245
b1101110 0
b1101110 !
b1101110 /
b1101110 2
b0 .
b1101110 "
b1101110 +
b1101110 1
b0 %
b0 *
b0 -
b1101110 $
b1101110 )
b1101110 ,
b1101110 4
b1 3
b111 (
1#
#250
0#
#255
b11011100 0
b11011100 !
b11011100 /
b1110011 2
b11011100 "
b11011100 +
b110 .
b110111 1
b1 %
b1 *
b1 -
1&
b0 (
1#
#260
0#
#265
b1110011 0
b10111001 !
b10111001 /
b10111001 "
b10111001 +
b101 .
b10 %
b10 *
b10 -
b1 (
1#
#270
0#
#275
b1110011 !
b1110011 /
b1110011 "
b1110011 +
b100 .
b11 %
b11 *
b11 -
b10 (
1#
#280
0#
#285
b110111 2
b11001101 0
b11100110 !
b11100110 /
b11100110 "
b11100110 +
b11 .
b100 %
b100 *
b100 -
b11 (
1#
#290
0#
#295
b11001101 !
b11001101 /
b11001101 "
b11001101 +
b10 .
b101 %
b101 *
b101 -
b100 (
1#
#300
0#
#305
b110111 0
b10011011 !
b10011011 /
b10011011 "
b10011011 +
b1 .
b110 %
b110 *
b110 -
b101 (
1#
#310
0#
#315
b110111 !
b110111 /
b110111 "
b110111 +
b0 .
b111 %
b111 *
b111 -
b110 (
1#
#320
0#
#325
b111 (
1#
#330
0#
#335
1#
#340
0#
#345
1#
